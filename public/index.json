[{"content":"","date":null,"permalink":"/","section":"bigdale123's Blog","summary":"","title":"bigdale123's Blog"},{"content":"","date":null,"permalink":"/tags/miscellaneous/","section":"Tags","summary":"","title":"Miscellaneous"},{"content":"","date":null,"permalink":"/tags/photography/","section":"Tags","summary":"","title":"Photography"},{"content":"","date":null,"permalink":"/posts/","section":"Posts","summary":"","title":"Posts"},{"content":"","date":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags"},{"content":"I am no photographer. I take pictures, but they\u0026rsquo;re not impressive. I pretty much only use my phone camera, a 64MP Android phone camera, so I lack the cool post processing that iOS devices do to make their photos better than the typical android based phone. Still, if possible i\u0026rsquo;d like to try taking cool space pictures with just my phone. So this post is going to be me documenting my experiments and methods to aid anyone in the future (and myself) who wants to try this.\nLike all the other posts I have made, this ended up being a dumping ground for any information I ran into while trying to get (what I call) a good star picture.\nBackground # Let\u0026rsquo;s talk about how you\u0026rsquo;re supposed to do astro-photography. According to Space.com, the best kind of setup is a camera that has a full-frame sensor. These pick up the most light, and make them an ideal choice for taking really dark photographs.\nThey are referred to as full-frame because the sensor size is the same size as a frame of 35mm film. Other cameras use what\u0026rsquo;s called a crop sensor, which are smaller than a frame of 35mm film but have their image blown up to fit that frame. These are cheaper to manufacture than full-frame sensors, which means that a full-frame sensor is going to be expensive. You can see in the below picture that the sensor on the right is the full frame sensor, and will capture much more data than the sensor on the left. As I stated before though, i\u0026rsquo;m trying to do this on the cheap, so we\u0026rsquo;re just going to use our phone and whatever sensor it has on it. Sorry if I got any details wrong in the section before, like I said i\u0026rsquo;m no photographer.\nNow, since we\u0026rsquo;re not using a full-frame camera, we\u0026rsquo;ll need to increase our exposure time to capture a similar amount of data to the full frame sensor. The exposure time is how long the shutter remains open and the camera receives and stores data. With short exposure times you can take good pictures without blurring, but a downside is that the image sensor takes in less data and the image becomes darker as a result. This gets corrected by the ISO and white balance settings (again, not a photographer, might be wrong, that\u0026rsquo;s the gist tho). The longer the exposure time, the more data you can log but the more prone the image is to blurring. Think about it this way: If the camera remains perfectly still, any new data that hits the sensor gets added to the existing pixels of the image. If the camera gets bumped or something walks in front of it while it\u0026rsquo;s taking its picture, that data gets added to the pre existing pixels also. This is what causes blurring, data getting added on top of pre existing data.\nWe can fix these issues with two pieces of low cost equipment: A tripod and a shutter remote. The tripod is necessary, but the shutter remote isn\u0026rsquo;t. It\u0026rsquo;s just a convenience, we can take the picture without touching the camera which won\u0026rsquo;t cause it to shake. If you don\u0026rsquo;t want to buy a shutter remote (they are pretty inexpensive), you can simply make a shutter timer and set it to a small amount of time. This way the camera waits X amount of seconds to actually open the shutter, allowing the camera to get still again after touching it before it actually takes the picture. The Tripod will elevate your camera and keep it still.\nI have no idea what i\u0026rsquo;m doing # I tried this while I was at the beach. I had hoped to get a really cool photo of the beach, ocean, horizon, and the stars above all at once. Think like a sunset on the beach picture, but instead of a sunset you can see the milky way. Cool idea, right? So I went out and bought a cheap tripod, waited until night, put my phone camera in pro mode and\u0026hellip; I mean, not bad for a first attempt and little to no research, but woof. They\u0026rsquo;re grainy, inconsistent, and they still blew me away the first time I tried. I couldn\u0026rsquo;t see 75% of the stars that were out with my eyes, so this was still really cool and totally worth the $10 i spent on a tripod. This was back in September of 2024, and now that it\u0026rsquo;s starting to get warm again i\u0026rsquo;m looking to try to improve my results. Here\u0026rsquo;s what my settings were when I tried these photos, i\u0026rsquo;m approximating however because I didn\u0026rsquo;t write down what I was doing. Something that I sorely regret now.\nSetting Value Exposure 32 seconds ISO ? White Balance ? Focus Infinite? Exposure Correction Auto F Stop (uncontrollable?) 1.8 The only thing I really remember is just cranking the exposure time up. Glad we\u0026rsquo;re revisiting this so I can make it scientific (or, at least adjacent to scientific). Research # Sticking with the space.com article, let\u0026rsquo;s talk about what the ideal camera settings should be. The Aperture (F-Stop) should be wide open, as open as it can go. Turns out my phone has an aperture size of 1.7, which is pretty good!. In order to capture as much data as possible, we should be saving images raw, no jpg or png or any processing at all. Now, for exposure times\u0026hellip;\nThe 500 Rule #If our exposure time is too long, the stars will trail (desired if you\u0026rsquo;re trying to shoot star trails). If it\u0026rsquo;s too short, you won\u0026rsquo;t capture enough data. There is a sure-fire way to find out how long our exposure time should be, and all we do is divide 500 by the focal length of our camera lens. The result of this is the exposure Time. $$\\frac{500}{Focal\\ Length\\ in\\ mm} = Exposure\\ Time\\ in \\ Seconds$$ So, for my camera, $\\frac{500}{4.71\\ mm}=106.1571\\ seconds$, which is longer than my camera can do\u0026hellip; But the equation doesn\u0026rsquo;t take into account crop factor. If we factor in crop factor (found here), the equation looks like this: $$\\frac{500}{Focal\\ Length \\times Crop\\ Factor}=Exposure\\ Time\\ in\\ Seconds$$ Multiplying the crop factor with the focal length is like saying \u0026ldquo;This is what the focal length would be if this were an equivalent full frame camera lens\u0026rdquo;. So, $\\frac{500}{4.71\\ mm \\times 5.35}=19.8424\\ seconds$, much more achievable for my camera. If this ends up not being enough data, we can either take our picture in a less light polluted zone or use an intervalometer. Intervalometers allow for longer exposure times by busting up the exposure time into smaller chunks, the only difference is we need to tell the intervalometer the rotation of the sky so it can \u0026ldquo;track\u0026rdquo; the stars and not cause blurring.\nISO Sensitivity #This will largely be the result of experimentation. ISO amplifies the light signal captured by the camera, but this also means that if the ISO is too high it will introduce noise into the image. Our ISO will need to be high since we are photographing a sky with no bright light source.\nFocus #This should be dead simple. Set your focus to manual focus, zoom into the brightest star in the frame, then adjust the focus until the star is as sharp as possible.\nWhite Balance #Again, something that should be the result of experimentation. This isn\u0026rsquo;t something that will affect the quality of the image though, so it\u0026rsquo;s alright to not have a hard rule and we could even leave it on auto. Generally though, slightly cooler white balances are preferred for astro shots. If light pollution ends up being an issue, we can get a light pollution filter to help remove it.\nRyan Borden (goat) #I found this video while researching camera settings, and it\u0026rsquo;s a great resource. It talks about what camera settings do, best practices for taking night shots, when to take them, etc.\nThe moon is bright, and could ruin our shot. The closer to a new moon you try to take your shot, the more light we get from stars. If you\u0026rsquo;re shooting the milky way, time of year matters. If you\u0026rsquo;re in the northern hemisphere, it\u0026rsquo;s best to try shooting in your spring to fall season. Get to a dark spot, and face south if you\u0026rsquo;re shooting the milky way. Use a dark spots map to find which areas are darkest. Put your camera in manual mode. Have your aperture as open as possible, maybe get a wide angle lens to get a lot in your frame 500 rule Shoot in RAW. Get your focus dialed in Adjust white balance to cancel out any artifacted colors (4000K) ISO, 2000-4000 is the ideal range. If you lower your ISO, increase your expsoure length. If you raise your ISO, lower your exposure length. He even includes a slide containing all the best practices he talks about during the video at the end of the video, Cody Mitchell (goat) #A video that really helped me understand camera settings was Cody Mitchell\u0026rsquo;s 9 Years of Camera Setting Knowledge in 29 Minutes. It really helps to understand the relationship between settings, and how to take correct exposures. Please go watch the video, it explains it in such good detail with examples. Cody also provides a cheat sheet with diagrams that explain most of what he talks about in his video, which I will be borrowing from to back up my own explanation. I still encourage you to get your own copy of the cheat sheet, since it is well put together and a valuable resource.\nThe main concept in his video is the idea of the \u0026ldquo;Exposure Triangle\u0026rdquo;. The three core settings you will use on your camera (that have the most impact on the exposure) are:\nAperture Shutter ISO In his video, he shows that to achieve the same exposure after changing one setting, you must adjust another setting accordingly. The idea is a Triangle, if you change one side of the triangle the other two sides must compensate to achieve the same exposure. Another key thing that I knew (but hadn\u0026rsquo;t realised) is that higher ISO = more grain. I knew it does, but it had never set in, yknow? So really, you should shoot at the lowest reasonable ISO. I understand that in some situations, you have to raise it in order to make your picture bright enough, but ideally you should try changing aperture and shutter speed first before raising it. Because as mentioned before, Higher ISO leads to a grainier image. Another key thing I learned was that the amount you have to adjust another setting is directly affected by how many stops you changed another setting by. Increase the F Stop by 3 stops? shutter speed needs to change by 3 stops. Increase the ISO 3 stops? The aperture needs to be changed 3 stops. Those are examples, but the idea is simple.\nThat\u0026rsquo;s all i\u0026rsquo;m going to talk about from his video and cheat sheet, I really recommend looking at his resources for yourself and making your own realizations.\nExperimenting # Experiment 1: Exposure Time #We\u0026rsquo;ve established what the exposure time should be, but I want to see what it can be before we mess with the ISO and WB. This will be done with the stock camera app in \u0026ldquo;Pro\u0026rdquo; mode, the exposure lengths will be the selectable exposure lengths. So, the steps between will be unequal. ISO will be set to 3000, and WB to 4000K to start. We will experiment with those next, after we have found our \u0026ldquo;ideal\u0026rdquo; exposure time (the one I think looks best). Here are the results:\nExposure Length Picture 0.5\u0026quot; 1\u0026quot; 1.3\u0026quot; 1.6\u0026quot; 2\u0026quot; 2.5\u0026quot; 3.2\u0026quot; 4\u0026quot; 5\u0026quot; 6\u0026quot; 8\u0026quot; 10\u0026quot; 13\u0026quot; 16\u0026quot; 21\u0026quot; 27\u0026quot; 32\u0026quot; Experiment 2: ISO vs. WB #For this experiment, I picked an exposure based on the results of the 500 rule. For me, this resulted in a exposure length of 21 seconds (well, actually 19.84 something, but i picked the nearest setting I had on my phone\u0026rsquo;s camera app). And here are the results of that:\nWB/ISO 2000K 3000K 4000K 5000K 6000K 7000K 8000K ISO 100\nISO 500\nISO 1000\nISO 2000\nISO 3000\nISO 4000\nISO 5000\nISO 6000\nISO 6400\nBased on the results, I like 5000K, but would probably end up doing something between 4000K and 5000K. And in terms of ISO, something between 1000 and 500 seems ideal. Something I don\u0026rsquo;t understand yet is why the images all have the center brighter than the rest of the image, but maybe that is due to sideways light pollution? I took these in the backyard, there was light from porch lights, the moon, windows, etc. It might also be beneficial to bump my exposure time to the nearest setting below the 500 rule, as 21\u0026quot; is a little bright and stars look like they\u0026rsquo;re just starting to trail.\nUpon further research, the reason for this is vignetting. It\u0026rsquo;s caused by the aperture being open too wide, so now I need to find a way to make it smaller (If that is even possible on this phone).\nSomething cool you might notice, this ends up being a timelapse of the sky moving. If you look at the brightest star in all the pictures, you can see that it moves towards the bottom right of the frame. Here\u0026rsquo;s a gif, pretty cool (seizure warning, the changes in WB can be a little rapid). Getting Serious # After doing research, I started to get some videos showing up in my youtube feed. And holy shit, it may be the best thing for this project. This guy on youtube, Nebula Photos has extremely detailed and informational videos describing exactly how to take any space picture with any camera, using an intervalometer and a program called DeepSkyStacker to calibrate our images. Following his steps should result in a higher quality picture going forward, so before we continue doing experiments lets break down some of the key information he talks about in this video:\nGear and Prep #A lot of this section is info we\u0026rsquo;ve already covered in the research section of this article, so i won\u0026rsquo;t talk about much. Basically,\nShoot in Raw If you can afford/have it, an actual camera suited for the shot you want Check light pollution on the map and try to find a suitable dark sky spot to take your photo Turn off all the auto modes on your camera; auto denoise, auto wb, auto focus, etc. I\u0026rsquo;m skimming here, if you want a more in depth discussion please watch the gear and prep sections of his video. But that was not what made me think his video is fantastic, it was the next section about calibrating your image. Calibration #When I first started this project (which I didn\u0026rsquo;t think could be classified as a project, but here we are after a lot of work) I did not understand the purpose of flat frames and bias frames, nor how to use them with a stacking software or anything. This video is what made it click for me, since he explains the purpose of each frame and how to make those frames so clearly. Another good resource for understanding how these frames are taken and what they do is Galactic Hunter\u0026rsquo;s calibration frames post.\nBias Frames These frames are used to subtract the noise that the image sensor of your camera makes on its own, from the image we take. If you have a removable lens, this is done with the lens off. You can take one set of bias frames and reuse them over and over, assuming you don\u0026rsquo;t change cameras or ISO. The bias frames will be unique to your camera and the ISO you shoot it at. To make a bias frame, Set the ISO to the ISO you want to shoot your photos at Set the shutter speed to the shortest it can be (Approaching zero, so something like $\\frac{1}{1000}\u0026quot;$ or smaller) Take the bias frame picture in complete darkness. Put the lens cap on, cover the camera up, anything to take a completely black picture. You should take at least 30, but the more the better. 50 seems to be the preferred number. Dark Frames These frames are similar to bias frames, in that they are shot in complete darkness. Except, these frames match the exposure time and ISO of our light frames (the \u0026ldquo;actual\u0026rdquo; pictures). If you have a removable lens, this is done with the lens off. Your dark frames should have the exact same settings as your light frames (actual pictures), just taken in complete darkness (hence the name, \u0026ldquo;Dark Frames\u0026rdquo;). Unlike bias frames, these will need to be retaken whenever a setting is changed, it is not just dependent on ISO. Again, take at least 30, but the more the better. 50 seems to be the preferred number. Flat Frames These are responsible for helping take care of vignetting in your images. vignetting is common when using lenses with wide apertures. To take a flat frame (these can be tricky), Take a picture of a flat white light source. This can be a T-shirt over the camera, a light panel, etc. You just need to take a picture that is a well-lit all white image. Set the exposure of your flats to the setting that makes your histogram peak be in the middle of the graph. It doesn\u0026rsquo;t need to be dead center, but it should be in the middle third of the histogram at least. Again, take at least 30 flat frames, 50 preferred. That should be it, although if you have a modded camera or something you will need to replace some frame types with different frame types (Example: if you have a cooled sensor camera, instead of biases you will take Dark Flat Frames instead). If you need different calibration frame types, please see Galactic Hunter\u0026rsquo;s calibration frames post.\nIt should also be noted that you don\u0026rsquo;t have to take these calibration frames before you go take your light frames. You can do this after, all though you will need to know what settings you shot your lights at to make effective calibration frames. Write them down if you plan to make your calibration frames later.\nCapturing #Once you get to your shooting location, block out any light sources you can from hitting your camera. In the video, Nebula Photos blocks some street lights from getting into his shot by propping up a sterilite container. I actually 3D printed a lens hood for my phone camera, that attaches using a hair tie. I went for a cheap option, there were some options to buy a lens hood for my phone but it was $20. My 3D print is less than a dollar, cost of 3D printer not included (because if it was it\u0026rsquo;d be like a $300 lens hood :)).\nNow, find the thing you want to photograph. Get your camera situated before moving on. In the video, he\u0026rsquo;s taking a picture of the Orion nebula, so he finds the Orion nebula before proceeding.\nNext, we focus our camera. In the video he uses a Bahtinov mask to focus, but you can also focus without a Bahtinov mask.\nZoom in your camera to the brightest star in the picture. If using a Bahtinov mask, Place your Bahtinov mask on your lens and look at the star. There should be a line coming off of the star if it is not in focus. Adjust the focus until the star makes a 6 pointed diffraction pattern (like a six pointed star). See AstroBackyard\u0026rsquo;s post for some examples. If not using a Bahtinov mask, Adjust your focus until that star is the most in focus it can be. The star should get smaller the more in focus it is, so when the star is smallest that should be the focus you need to be at. To test, you can take a picture (with shorter exposure and different settings, since we are zoomed in) and zoom in as much as you can. If the stars look crisp, they\u0026rsquo;re in focus. If they look blurry, they\u0026rsquo;re not. Basically, just fiddle with the focus point until the stars are the most in focus to you. Zoom back out to the zoom level you want Get your intervalometer setup if you are using one. You\u0026rsquo;ll want to take more pictures if the thing you are trying to photograph is farther out in space. If you use an intervalometer, you\u0026rsquo;ll want to use the NPF method to determine exposure time per shot, instead of the 500 rule.\nOnce you\u0026rsquo;ve got your shots, pack up and head home to stack and post process.\nPre-processing #The stacker being used is DeepSkyStacker, which will calibrate your lights using calibration frames taken earlier. Overall, it will make our image cleaner and make more stars appear.\nIn DSS (DeepSkyStacker), click \u0026ldquo;open picture files\u0026rdquo; and load in your light frames. Now click \u0026ldquo;dark files\u0026hellip;\u0026rdquo; to load in your dark frames. Click \u0026ldquo;flat files\u0026hellip;\u0026rdquo; to load in your flats Click \u0026ldquo;bias files\u0026hellip;\u0026rdquo; or \u0026ldquo;dark flats\u0026hellip;\u0026rdquo; (depending on your setup) to load those in. Click \u0026ldquo;Register Checked Pictures\u0026rdquo; to register all the pictures we just loaded. Check to make sure every type of frame was loaded Check that \u0026ldquo;Automatic Detection of Hot pixels\u0026rdquo; is enabled in the Actions tab Go to the Advanced tab and click \u0026ldquo;Compute the number of detected stars\u0026rdquo;, let it do its thing. If you don\u0026rsquo;t get a lot of stars back, you can lower or raise the star detection threshold to adjust how it detects stars. Click \u0026ldquo;Recommended settings\u0026rdquo; in the Action tab to view recommended settings Click \u0026ldquo;Stacking Parameters\u0026rdquo; in the Action tab to view stacking parameters Click \u0026ldquo;OK\u0026rdquo; to start calibrating. Sort your imported photos by score, pick the highest scoring picture as your reference frame (right click, \u0026ldquo;use as reference frame\u0026rdquo;) On the left, click \u0026ldquo;Stack checked pictures\u0026rdquo; and review the settings. I would probably roll with the defaults the first time around, experiment later. Go do something else while it stacks, it might take a while. Once done, it should output a Autosave.tiff in your lights folder. Post-processing #You might be dissapointed at what comes out of DSS (might be pretty dark), but don\u0026rsquo;t worry. The image will look better after post-processing in Photoshop or a similar program like gimp. The following instructions are pretty much step-by-step from the Nebula Photos video, so they\u0026rsquo;re photoshop oriented. GIMP users, you\u0026rsquo;re on your own. Maybe in the future I can figure out a GIMP workflow, if so I will write a new article (this one\u0026rsquo;s hella long!)\nAlso, photos to come later, once I get a chance to try this. Just copying it down so I can start learning some of it.\nOpen that Autosave.tiff in your photo editor. It should open it as a 32 bit image, don\u0026rsquo;t change this yet. Duplicate the initial layer, and call it \u0026ldquo;First Stretch\u0026rdquo; This is the step where we flatten the image. Open the levels menu (histogram) and you should see a large spike on the left of the histogram. Move the middle slider towards the spike a little bit and press OK. This should bring the spike closer to the center and spread it out a bit. It\u0026rsquo;s OK if the image becomes light, we\u0026rsquo;ll fix this later. Reset the black point to just before the beginning of all the data and press ok. Repeat this process until that spike has been stretched out enough that we get some details in our picture. Don\u0026rsquo;t over do it though, we don\u0026rsquo;t want to clip any data out, we\u0026rsquo;re essentially re-ranging the existing data in the stacked image. Now we can switch the image to \u0026ldquo;16 bits per channel mode\u0026rdquo;. If it asks if you want to merge, say \u0026ldquo;don\u0026rsquo;t merge\u0026rdquo;. Duplicate the stretch layer and call it \u0026ldquo;background removal\u0026rdquo;. Select everything (Ctrl-A) and then copy the layer (Ctrl-C). Now, open a new image. It should copy the size of the image from the clipboard. Name this new image \u0026ldquo;bg\u0026rdquo;. Delete the (should be blank) background layer. In the \u0026ldquo;bg\u0026rdquo; project, Open your \u0026ldquo;Filter dust, noise, and scratches\u0026rdquo; menu in your editor. Set your radius to something on the lower end, in the video it was 60. For the halos that are left, use spot healing to fix and remove those halos. The goal is to have an image that is just the light pollution gradient. The gradient should be as smooth as possible, we\u0026rsquo;re removing the hot spots that stars introduce. Once the image looks clean enough, save both projects (The original we opened in step one and this \u0026ldquo;bg\u0026rdquo; file we created) In the original project file (step 1 file) deselect everything and pick the \u0026ldquo;background removal\u0026rdquo; layer. We are going to \u0026ldquo;Apply image\u0026rdquo; In the menu that opens, select the source as the \u0026ldquo;bg\u0026rdquo; file we created. Pick the layer that contains the gradient in the \u0026ldquo;layer section\u0026rdquo; Set the blending method to \u0026ldquo;Subtract\u0026rdquo; Looking at the picture behind the menu window, change the offset (starting at 10, increasing by 10) until you get to a point where the image is fairly gray, but flat. The key thing we are looking for is detail, we don\u0026rsquo;t want to lose any stars subtracting the gradient. Once it looks good, hit \u0026ldquo;OK\u0026rdquo;. duplicate the layer, name it \u0026ldquo;second stretch\u0026rdquo;. Open the levels menu again, and stretch the histogram out like before. This time, the goal is to add contrast to the image and bring out more data from our tiff file. Now open the Curves menu, and apply an aggressive S curve. Bring the mid levels up and take the shadows down. Duplicate the layer, name it \u0026ldquo;saturation\u0026rdquo; We\u0026rsquo;re going to raise the saturation on our image. Open the hue/saturation menu, and adjust the saturation to make the colors pop, but don\u0026rsquo;t add so much that you get color noise (color appearing out of nowhere). Worth noting that if there is a feature you want to saturate without affecting the rest of the image, mask off the feature in a new layer (or layer mask) and adjust the saturation of the feature. Gotta be honest, the way he described it doesn\u0026rsquo;t make sense to me yet, but it shouldn\u0026rsquo;t be too hard. You will likely have some artifacting on the edges, just crop those out. color correction. Necessary if some stars have a halo that distracts you from the subject of the image, if you have a subject Make a new layer from visible, name it \u0026ldquo;halo correction\u0026rdquo; open the \u0026ldquo;Select by Color Range\u0026rdquo; menu This is easy to overdo, if you do, start over set the fuziness to 40 (or keep it at default) set the selection criteria to \u0026ldquo;sampled colors\u0026rdquo; select a bunch of colors that you want to mute/correct check the selection preview to see if it is good enough selection play around with settings to get desired selection press OK If there are selections where you dont want them, do the following: press Q to bring up the selection mask overlay (?) with the brush tool, paint in black the spots you don\u0026rsquo;t want color corrected. Press Q again to exit using the selection, create a layer mask (adjustment layer?) to change the hue/saturation of the selection Open the hue/saturation properties for the layer mask play around with the values to fix the stars. Hit OK when done. Final whole image color correction, to make the blacks truly black Your black of the void of space might not be completely black, you can adjust the whole image to make it look right. Open a selective color adjustment layer (sorry gimp folks, idk what this is yet) Set the colors options to \u0026ldquo;blacks\u0026rdquo; adjust the color options until the image looks as desired. Done! Export the image as desired. Trying out with new info # Now that I have watched the whole video, I want to try to take a good picture. One you\u0026rsquo;d hang up on the wall.\nUsing the new NPF rule that is mentioned, my exposure times need to be about 10.3 seconds (i\u0026rsquo;ll round down to 10s). In a single picture, this will be darker but we\u0026rsquo;re taking dozens if not hundreds of light frames, so that should make up for it in post processing. My intervalometer will be DeepSkyCamera, an android app that handles it all via software. I plan on taking 360 light frames, which equates to about an hour of exposure time. Here are the settings for each exposure:\nExposure Time: 12s ISO: 200 WB: 5900K (Daylight-ish) And here\u0026rsquo;s the results from that: Not bad! It\u0026rsquo;s noisier than I anticipated, but there\u0026rsquo;s more stars than before. That big bright one in the center is Mars, which happened to be directly above. Something I failed to realize was that because it was straight up, it rotated the fastest. I took about 135 light frames, but only ended up stacking about 30 of those because of how much the constellation had moved. In the future, maybe I should take a smaller group of photos and then recenter the subject of my photograph before taking another \u0026ldquo;bank\u0026rdquo;. This could all be avoided if you use a star tracker, but those are expensive. Some DIY Options exist, but I don\u0026rsquo;t think im that invested yet.\nThanks for reading! I know it was a long one, but it ended up being a larger rabbit hole than I thought it would be.\n","date":"March 28, 2025","permalink":"/posts/taking-pictures-of-space/","section":"Posts","summary":"","title":"Taking Pictures of Space"},{"content":" Finally, I can do the part of the original post I planned on! If you\u0026rsquo;re unaware, I made a post before this one about vim keybinds. This post was originally intended to be a complete article detailing what key binds I was going to learn and getting neovim setup with some plugins and settings to help out anybody else that got intimidated by the learning curve. And as you can see, the key binds and commands became a really long list. This post will be about configuring Neovim and setting it up with plugins.\nMy hope is that mainly, I can document my setup so that I can understand it later when I forget what things do.\nNeovim Settings # By default, Neovim looks like this: It might change a little for you, but this is pretty much how it looks out of the box. And if you open up a file\u0026hellip; This is what it should look like. You\u0026rsquo;ll notice it\u0026rsquo;s missing some features that we might have in other editors like VSCode, like line numbers, syntax highlighting, etc. And this isn\u0026rsquo;t because it can\u0026rsquo;t do those things, it\u0026rsquo;s just that they are not enabled by default. Vim and other vim-like editors (Neovim) are built to be incredibly lightweight while still being a powerful editor. Things that might cause the editor to take longer to draw get disabled, in favor for faster draw times which make the editor feel and behave faster. Another reason for this is it makes the editor much faster to launch. You may notice when you open VSCode, it takes a couple of seconds to load everything. It takes about a second to load enough to the point where you can start using it, opening files and editing them. With vim editors, it\u0026rsquo;s near instant. It loads up, file open, ready to edit in almost no time at all.\nSo now that we know why these features are turned off, lets turn them back on. Unless you are running Neovim on a potato, enabling these really shouldn\u0026rsquo;t affect the speed of the editor at all, only marginally. The real speed killer will be plugins, but there\u0026rsquo;s something we\u0026rsquo;ll cover later to help remedy that in the plugins section. I will be using This Site\u0026rsquo;s start config to start my vim config (which for Neovim is located at `~/.config/nvim/init.vim):\n\u0026#34; Basic Settings \u0026#34; ************** set nocompatible \u0026#34; disable compatibility to old-time vi \u0026#34; Selection Behavior \u0026#34; ****************** set showmatch \u0026#34; highlights matching brackets (),[],{} set ignorecase \u0026#34; makes search patterns case insensitive set hlsearch \u0026#34; highlight all search matches set incsearch \u0026#34; show matches as search pattern is typed \u0026#34; Mouse and Cursor Behavior \u0026#34; ************************* set mouse=a \u0026#34; enable mouse support set cursorline \u0026#34; highlights the line where the cursor is \u0026#34; Tab and Indentation Settings \u0026#34; **************************** set tabstop=4 \u0026#34; number of columns occupied by a tab set softtabstop=4 \u0026#34; see multiple spaces as tabstops so \u0026lt;BS\u0026gt; does the right thing set expandtab \u0026#34; converts tabs to white space set shiftwidth=4 \u0026#34; width for autoindents set autoindent \u0026#34; indent a new line the same amount as the line just typed \u0026#34; UI Enhancements \u0026#34; *************** set number \u0026#34; adds line numbers set wildmode=longest,list \u0026#34; adds command line autocomplete \u0026#34; longest = longest unambiguous match \u0026#34; list = displays all possible matches set cc=80 \u0026#34; set an 80 column border for recommended line length set ttyfast \u0026#34; Scrolls as fast as the terminal supports \u0026#34; File Type and Syntax Highlighting \u0026#34; ********************************* filetype plugin on \u0026#34; turn on file-type-specific plugins filetype plugin indent on \u0026#34; allow auto-indenting depending on file type syntax on \u0026#34; syntax highlighting \u0026#34; Clipboard \u0026#34; ********* set clipboard=unnamedplus \u0026#34; use system clipboard for copy/paste \u0026#34; set backupdir=~/.cache/vim \u0026#34; Directory to store backup files. This is already a pretty good start! I tried out the set cc=80, thinking it would just be a line and not highlight the whole column. It wasn\u0026rsquo;t so I disabled it, but maybe I will revisit later if I can find a solution that\u0026rsquo;s not too invasive. Here\u0026rsquo;s what Neovim looks like now: It\u0026rsquo;s already a lot nicer to work with, being able to use the mouse (even though I should be using the keyboard) is a nice addition. The mouse is still pretty limited on it\u0026rsquo;s own, which I think will wean me off of using the mouse. It\u0026rsquo;s mainly just nice to be able to move the cursor with the mouse.\nAppearance # Right now I think I am happy with the way it looks, but I also want to go ahead and lay out some groundwork for myself in the future. I am also going to setup background transparency, I just like being able to see stuff behind my terminal.\nTransparency #I\u0026rsquo;ve done this in the past, but after not realizing that I didn\u0026rsquo;t back up my dotfiles correctly I lost that configuration 😭. I remember that I did it without a plugin, so it should be possible to write it in vimscript. I\u0026rsquo;m just at a loss trying to find it in other storage, so I guess i\u0026rsquo;ll have to find in on The Internet. Thankfully, you can throw a rock and hit vim/neovim configs. Here\u0026rsquo;s a site that had a \u0026ldquo;vanilla\u0026rdquo; (plugin independent) method to get transparency working. Just add the following to your config:\nhighlight Normal guibg=none highlight NonText guibg=none highlight Normal ctermbg=none highlight NonText ctermbg=none And you\u0026rsquo;re good to go: Can you tell I\u0026rsquo;ve been watching Severance?\nColor Schemes #Even though I don\u0026rsquo;t intend on installing a color scheme right now, I would like to already have all the groundwork laid out so that in the future all I have to do is swap out one theme for another. Vim and Neovim actually already come with some preinstalled color schemes, accessible through the :colorscheme command. Some color schemes require 24 bit color, though, and this wont make it a persistent change. Here\u0026rsquo;s what i\u0026rsquo;ve added to my config:\nset termguicolors colorscheme default And that should be about it. If I install a colorscheme in the future, it\u0026rsquo;ll be as a plugin, and still be accessible through :colorscheme.\nPlugins # It\u0026rsquo;s time. The moment that i\u0026rsquo;ve been looking forward to. Plugins.\nThis is where the cool stuff happens, and (can) add a ton of functionality to vim. They can add syntax highlighting, autocompletion, Git integration, and more. You can find most of all the plugins available at vim-awesome. But, these can make vim load slower, so let me introduce you to what will be the most important plugin for me: Lazy.nvim. This plugin manager Lazily loads plugins, meaning that plugins get loaded when they try to get used. This keeps it fast, while still being able to handle a lot of plugins. It\u0026rsquo;s kind of like a library: when you want to read a book you don\u0026rsquo;t have to pull every book off the shelf first, you just grab the book you want. In fact, LazyVim is a neovim setup that is powered by lazy.nvim. It comes with a bunch of plugins installed and pre configured. I\u0026rsquo;ve also used this in the past, and while it\u0026rsquo;s nice, I think it is a little overkill for me. So, i\u0026rsquo;ll be selecting my plugins myself.\nThere\u0026rsquo;s one more order of business before we start installing plugins, and that\u0026rsquo;s because i\u0026rsquo;m using lazy.nvim. The documentation specifies you need to setup lazy in init.lua, and not init.vim like i\u0026rsquo;m using now. So, I need to translate my init.vim to an equivalent init.lua 😞\n-- Appearance ------------- vim.opt.termguicolors = true vim.cmd([[colorscheme default]]) vim.cmd([[highlight Normal guibg=none]]) vim.cmd([[highlight NonText guibg=none]]) vim.cmd([[highlight Normal ctermbg=none]]) vim.cmd([[highlight NonText ctermbg=none]]) -- Basic Settings ----------------- vim.opt.compatible = false -- Disable compatibility to old-time vi -- Selection Behavior --------------------- vim.opt.showmatch = true -- Highlight matching brackets vim.opt.ignorecase = true -- Case-insensitive searching vim.opt.hlsearch = true -- Highlight all search matches vim.opt.incsearch = true -- Show matches as search pattern is typed -- Mouse and Cursor Behavior ---------------------------- vim.opt.mouse = \u0026#34;a\u0026#34; -- Enable mouse support vim.opt.cursorline = true -- Highlight the current line -- Tab and Indentation Settings ------------------------------- vim.opt.tabstop = 4 -- Number of columns occupied by a tab vim.opt.softtabstop = 4 -- See multiple spaces as tabstops vim.opt.expandtab = true -- Convert tabs to spaces vim.opt.shiftwidth = 4 -- Width for auto-indents vim.opt.autoindent = true -- Maintain indent of current line -- UI Enhancements ------------------ vim.opt.number = true -- Show line numbers vim.opt.wildmode = { \u0026#34;longest\u0026#34;, \u0026#34;list\u0026#34; } -- Command-line autocomplete -- vim.opt.colorcolumn = \u0026#34;80\u0026#34; -- Set an 80 column border for recommended line length vim.opt.ttyfast = true -- Enable fast terminal scrolling -- File Type and Syntax Highlighting ------------------------------------ vim.cmd([[filetype plugin on]]) vim.cmd([[filetype plugin indent on]]) vim.cmd([[syntax on]]) -- Clipboard ------------ vim.opt.clipboard = \u0026#34;unnamedplus\u0026#34; -- Use system clipboard for copy/paste -- vim.opt.backupdir = os.getenv(\u0026#34;HOME\u0026#34;) .. \u0026#34;/.cache/vim\u0026#34; -- Directory for backup files On the plus side, now that it\u0026rsquo;s lua the code block highlights the syntax. That\u0026rsquo;s nice.\nLazy.nvim # If you\u0026rsquo;re following along, please read the Official lazy.nvim documentation to install it since it might change overtime. At the time of install, following the structured setup, all you need to do is add a requirement to init.lua and the definition of that requirement., lua/config/lazy.lua. The lazy.lua file is what bootstraps lazy.nvim and sets it up.\nHere\u0026rsquo;s the file structure for lazy.nvim:\n~/.config/nvim ├── lua │ ├── config │ │ └── lazy.lua │ └── plugins │ ├── spec1.lua │ ├── ** │ └── spec2.lua └── init.lua And lazy.lua:\n-- Bootstrap lazy.nvim local lazypath = vim.fn.stdpath(\u0026#34;data\u0026#34;) .. \u0026#34;/lazy/lazy.nvim\u0026#34; if not (vim.uv or vim.loop).fs_stat(lazypath) then local lazyrepo = \u0026#34;https://github.com/folke/lazy.nvim.git\u0026#34; local out = vim.fn.system({ \u0026#34;git\u0026#34;, \u0026#34;clone\u0026#34;, \u0026#34;--filter=blob:none\u0026#34;, \u0026#34;--branch=stable\u0026#34;, lazyrepo, lazypath }) if vim.v.shell_error ~= 0 then vim.api.nvim_echo({ { \u0026#34;Failed to clone lazy.nvim:\\n\u0026#34;, \u0026#34;ErrorMsg\u0026#34; }, { out, \u0026#34;WarningMsg\u0026#34; }, { \u0026#34;\\nPress any key to exit...\u0026#34; }, }, true, {}) vim.fn.getchar() os.exit(1) end end vim.opt.rtp:prepend(lazypath) -- Make sure to setup `mapleader` and `maplocalleader` before -- loading lazy.nvim so that mappings are correct. -- This is also a good place to setup other settings (vim.opt) vim.g.mapleader = \u0026#34; \u0026#34; vim.g.maplocalleader = \u0026#34;\\\\\u0026#34; -- Setup lazy.nvim require(\u0026#34;lazy\u0026#34;).setup({ defaults = { lazy = true, }, spec = { -- import your plugins { import = \u0026#34;plugins\u0026#34; }, }, -- Configure any other settings here. See the documentation for more details. -- colorscheme that will be used when installing plugins. install = { colorscheme = { \u0026#34;default\u0026#34; } }, -- automatically check for plugin updates checker = { enabled = true }, }) Now let\u0026rsquo;s install some plugins!\nvim-airline # Let\u0026rsquo;s start off simple, since I don\u0026rsquo;t actually trust that I installed lazy.nvim correctly. vim-airline is a \u0026ldquo;lean \u0026amp; mean\u0026rdquo; status line that sits just above the command area and below the window. I just think it looks better than the standard status line, and it should be a simple introduction to Plugin Specs.\nlazy.nvim uses something called a \u0026ldquo;spec\u0026rdquo; to define plugins for lazy.nvim. This defines where to download a plugin, the config of that plugin, what it\u0026rsquo;s priority is, whether to load the plugin lazily, etc. I gotta be honest, having used VimPlug (another vim plugin manager) in the past I kind of miss being able to just declare a plugin and running with it. Specs can be a little more involved, and i\u0026rsquo;m also a little disappointed that vim-awesome does not show lazy specs for plugins listed on their site. Then again, I haven\u0026rsquo;t actually written the spec yet. Maybe it\u0026rsquo;s easier than it looks.\nreturn { { \u0026#34;vim-airline/vim-airline\u0026#34;, lazy = false, -- needs to be available at start, no lazy } } And hey! Looks like that\u0026rsquo;s all you need! We can see that the status line has changed to vim-airline in this screenshot: That window that opened is the Lazy manager window, whenever you need to manage plugins on the fly you use this window. By default, this opens every time you install a new plugin. If you need to access this while in neovim, you simply run :Lazy.\nvim-gitgutter # Damn! I way underestimated how hard it would be to pick out plugins, because they\u0026rsquo;re all so good. I\u0026rsquo;m trying not to overload myself to start, and to keep the number of plugins as small as possible (since more plugins $\\approx slower editor). Let\u0026rsquo;s play it safe with gitgutter, which will show changes in the gutter of neovim (far left side of the window). Here\u0026rsquo;s the spec:\nreturn { { \u0026#34;airblade/vim-gitgutter\u0026#34;, lazy = false, -- needs to be available at start, no lazy } } See those +\u0026rsquo;s on the left side of the screen? That\u0026rsquo;s gitgutter! It just marks lines that are different from the previous commit.\nNERDTree # Now this one\u0026rsquo;s pretty neat, and it\u0026rsquo;s going to be the first plugin that will be lazy loaded. NERDTree is a file explorer that runs inside neovim. I\u0026rsquo;ll also be installing some plugins for NERDTree, mainly nerdtree-git-plugin \u0026amp; vim-devicons. Here\u0026rsquo;s the spec for NERDTree:\nreturn { { \u0026#34;preservim/nerdtree\u0026#34;, cmd = { \u0026#34;NERDTreeToggle\u0026#34;, \u0026#34;NERDTreeFind\u0026#34; }, keys = { { \u0026#34;\u0026lt;leader\u0026gt;n\u0026#34;, \u0026#34;:NERDTreeToggle\u0026lt;CR\u0026gt;\u0026#34;, desc = \u0026#34;Toggle NERDTree\u0026#34; }, { \u0026#34;\u0026lt;leader\u0026gt;f\u0026#34;, \u0026#34;:NERDTreeFind\u0026lt;CR\u0026gt;\u0026#34;, desc = \u0026#34;Find file in NERDTree\u0026#34; }, }, dependencies = { \u0026#34;Xuyuanp/nerdtree-git-plugin\u0026#34;, }, config = function() vim.g.NERDTreeShowHidden = 1 -- Show hidden files vim.g.NERDTreeMinimalUI = 1 -- Simplify UI vim.g.NERDTreeDirArrows = 1 -- Enable arrows for directories end, } } And the spec for vim-devicons:\nreturn { { \u0026#34;ryanoasis/vim-devicons\u0026#34; } } NERD Commenter # The NERD Tools are really good, you kinda can\u0026rsquo;t go wrong with one. This tool makes commenting almost as easy as it would be in VSCode (with Ctrl+/). Simply select test in visual mode, or leave your cursor on a line to be commented, then run any of these commands:\n[count]\u0026lt;leader\u0026gt;cc |NERDCommenterComment| Comment out the current line or text selected in visual mode. [count]\u0026lt;leader\u0026gt;cn |NERDCommenterNested| Same as cc but forces nesting. [count]\u0026lt;leader\u0026gt;c\u0026lt;space\u0026gt; |NERDCommenterToggle| Toggles the comment state of the selected line(s). If the topmost selected line is commented, all selected lines are uncommented and vice versa. [count]\u0026lt;leader\u0026gt;cm |NERDCommenterMinimal| Comments the given lines using only one set of multipart delimiters. [count]\u0026lt;leader\u0026gt;ci |NERDCommenterInvert| Toggles the comment state of the selected line(s) individually. [count]\u0026lt;leader\u0026gt;cs |NERDCommenterSexy| Comments out the selected lines with a pretty block formatted layout. [count]\u0026lt;leader\u0026gt;cy |NERDCommenterYank| Same as cc except that the commented line(s) are yanked first. \u0026lt;leader\u0026gt;c$ |NERDCommenterToEOL| Comments the current line from the cursor to the end of line. \u0026lt;leader\u0026gt;cA |NERDCommenterAppend| Adds comment delimiters to the end of line and goes into insert mode between them. \u0026lt;leader\u0026gt;ca |NERDCommenterAltDelims| Switches to the alternative set of delimiters. [count]\u0026lt;leader\u0026gt;cl |NERDCommenterAlignLeft [count]\u0026lt;leader\u0026gt;cb |NERDCommenterAlignBoth Same as |NERDCommenterComment| except that the delimiters are aligned down the left side (\u0026lt;leader\u0026gt;cl) or both sides (\u0026lt;leader\u0026gt;cb). [count]\u0026lt;leader\u0026gt;cu |NERDCommenterUncomment| Uncomments the selected line(s). Here\u0026rsquo;s the spec: return { {\u0026#34;scrooloose/nerdcommenter\u0026#34;} } Syntastic # Syntastic is a syntax checking plugin for vim. Here\u0026rsquo;s the spec:\nreturn { \u0026#34;vim-syntastic/syntastic\u0026#34;, lazy = false, -- Ensure it loads on startup config = function() -- Example configuration vim.g.syntastic_always_populate_loc_list = 1 vim.g.syntastic_auto_loc_list = 1 vim.g.syntastic_check_on_open = 1 vim.g.syntastic_check_on_wq = 0 end, } Syntastic comes with almost every checker you might need, but for the ones that aren\u0026rsquo;t you\u0026rsquo;ll need to install the checker yourself. Check the syntastic page for information.\nI Purposefully broke this spec to see if it detected bad syntax. And it does! But only when you save the file. You can always run :SyntasticCheck, but why not save the file? It might reinforce some good behavior.\nConclusion # Okay, I have GOT to stop with it. I kept looking at every plugin and vexing over whether it would actually get used or not, or if I was going to end up adding too many plugins. This is a pretty good start point, though, and I can always change stuff later. Because of how Lazy handles plugins modularly, it\u0026rsquo;s easy to just edit the spec of any plugin I want since they are all separated.\n","date":"March 5, 2025","permalink":"/posts/getting-started-with-neovim/","section":"Posts","summary":"","title":"Getting Started with Neovim"},{"content":"","date":null,"permalink":"/tags/linux/","section":"Tags","summary":"","title":"Linux"},{"content":"","date":null,"permalink":"/tags/neovim/","section":"Tags","summary":"","title":"Neovim"},{"content":"","date":null,"permalink":"/tags/software/","section":"Tags","summary":"","title":"Software"},{"content":"","date":null,"permalink":"/tags/vim/","section":"Tags","summary":"","title":"Vim"},{"content":"Cheeky little blog post :)\nI use Moonlight \u0026amp; Sunshine to do remote gaming, and it works fine on an Ethernet connection. However, when you switch to using Wifi there are lag spikes about every 2-3 minutes. I looked up if anybody else was having this issue on wifi, and most of the posts that I read said that it was related to background scanning of networks. I searched for a way to do this, couldn\u0026rsquo;t find a clear answer, and last resort asked chatGPT. And what do you know, it was right for once! So, the below solution is courtesy of our AI overlords.\n1. Modify the NetworkManager Configuration #Edit (or create) the configuration file:\nsudo nano /etc/NetworkManager/conf.d/no-scanning.conf Add the following lines:\n[device] wifi.scan-rand-mac-address=no [wifi] scan-generated-ssid=1 disable-connected-scans=true 2. Restart NetworkManager #Apply the changes by restarting NetworkManager:\nsudo systemctl restart NetworkManager 3. Verify the Setting #Check if scanning is disabled while connected:\nnmcli device wifi rescan If scanning is disabled, the command should fail or not return new networks.\nThis configuration prevents NetworkManager from continuously scanning for new networks while you are already connected. If you experience any connectivity issues, you can revert these changes by removing or modifying the file.\n","date":"February 27, 2025","permalink":"/posts/disabling-background-scanning-on-networkmanager-when-connected/","section":"Posts","summary":"","title":"Disabling Background Scanning on NetworkManager when connected"},{"content":"","date":null,"permalink":"/tags/networking/","section":"Tags","summary":"","title":"Networking"},{"content":"I\u0026rsquo;ve been a VSCode user for basically all the time I\u0026rsquo;ve been writing code, I\u0026rsquo;ve tried Neovim and Vim before and couldn\u0026rsquo;t get used to the keyboard shortcuts. Now that my preferred Desktop environment is i3wm, keyboard shortcuts have become more common. Basically what i\u0026rsquo;m saying is, it\u0026rsquo;s time to at least branch out and try vim based editing for real. I do plan on using some plugins, which I will cover after I learn basic navigation and such.\nThis post was originally intended to be a complete article detailing what key binds I was going to learn and getting Neovim setup with some plugins and settings to help out anybody else that got intimidated by the learning curve. However, turns out there are lots of key binds that are really useful (imagine that: lots of key binds in a key bind oriented text editor) and this portion of the post ballooned in size (I gripe about this in the Editor\u0026rsquo;s note. I felt i\u0026rsquo;d bust it up into two posts, one for vim keybinds (this post) and one for configuring Neovim with plugins and settings.\nA great resource is Vim Cheat Sheet, which has most of the common key binds detailed. I will be picking and choosing from this list for this article, mainly so that I can cut out features that I do not use currently. It should make the transition process easier, and I can still learn the other functionality at a later date if I need to. Basically, i\u0026rsquo;m using this as my own documentation on how to use vim.\nLastly, before I jump into this, you don\u0026rsquo;t have to use vim or Neovim to take advantage of the vim style keybindings. There exist many plugins for many editors that replicate this functionality. Here we go!\nEditor\u0026rsquo;s Note: # WHAT IS WRONG WITH ME?! I ended up writing down a little bit from each section of the cheat sheet, because I kept finding stuff and going \u0026ldquo;oh that\u0026rsquo;s cool\u0026rdquo;. What I had planned on being a very basic list of commands to get started, and then building onto it later, ended up being an EXHAUSTIVE (but not complete) list of commands and key binds to be used in vim. I guess it\u0026rsquo;s good that the work is already done, but MAN. I\u0026rsquo;m gonna have to take a nap.\nLet this be a warning to all: The rabbit hole can go as deep as you want to. Be Careful!\nVim Modes # Yes, yes, back to back memes. Gotta have fun with it, y\u0026rsquo;know?\nVim has different modes for accomplishing different tasks. They are:\nNormal Mode The default mode, used for navigation and executing commands. To get back to Normal mode from any other mode, hit Esc or type Ctrl + [. Insert Mode Used for inserting and editing text. Entered by typing any Insert Mode keybinds. Visual Mode Used for selecting text Entered by typing: v to do character wise selection V to do line wise selection Ctrl + v to do Block Selection Command-Line Mode Used for executing vim commands Entered by typing : (usually most commands are document as something like :q) Replace Mode Similar to Insert mode, but replaces existing characters instead of inserting new ones. Entered by typing R Select Mode Similar to Visual mode but behaves similar to selection in other editors Typing replaces the selection Entered by typing gh, gH, or g\u0026lt;C-h\u0026gt; The next section will be all the \u0026ldquo;most practical\u0026rdquo; (more common) keybinds you might need to know. It is not an exhaustive list, and is also what I personally think would be necessary or convenient to me. If you have the time, I would recommend you scroll through the cheat sheet mentioned next and see if there is anything you would like to be able to use. (What ended up being) A Mostly exhaustive list of vim commands # As a side note, if you don\u0026rsquo;t understand what a keybind does, ChatGPT gives some really good explanations with examples.\nCursor Movement # Arrow Keys will move the cursor around, but the \u0026ldquo;vim\u0026rdquo; way is to use h,j,k,l. Use either. h moves the cursor left j moves the cursor down k moves the cursor up l moves the cursor right \u0026lt;line number\u0026gt;gg or \u0026lt;line number\u0026gt;G will jump the cursor to the line number typed. gg on its own will jump the cursor to the first line in the document G on its own will jump the cursor to the last line in the document Jumping within the screen H will jump the cursor to the top of the screen M will jump the cursor to the middle of the screen L will jump the cursor to the bottom of the screen Jumping to a paragraph/function/block } jumps to the next paragraph (next empty line) { jumps to the previous paragraph (next empty line) Scrolling the Screen zz will scroll the screen until the current line is in the center of the screen zt will scroll the screen until the current line is at the top of the screen zb will scroll the screen until the current line is at the bottom of the screen Ctrl + e will move the screen down one line (without moving cursor) Ctrl + y will move the screen up one line (without moving cursor) Ctrl + b will move the screen up one page (cursor to last line) Ctrl + f will move the screen down one page (cursor to first line) Ctrl + d will move the cursor and screen down 1/2 page Ctrl + u will move the cursor and screen up 1/2 page Insert Mode #This is the mode you will be in to actually write text. Any of these commands will place you in Insert mode (Except for the commands that take you out of insert mode 🙂):\ni will insert text before the cursor I will insert text at the beginning of the line a will insert text (append) after the cursor A will insert text (append) at the end of the line o will append text (open) a new line below the current line O will append text (open) a new line above the current line Editing in Normal Mode # u will undo a change Ctrl + r will redo a change . will repeat a change ciw will replace an entire word Place the cursor anywhere on/in a word, run ciw\u0026lt;replacement word\u0026gt;, and the word you had selected will be replaced with the replacement. cw will perform a change until the end of a word ce will also do this but only works in the middle of a word. cw is more versatile since it works at the beginning and in the middle of a word. cc will change an entire line, and is generally (but not always) faster than deleting and retyping the line. c$ or C is similar to cc but is intended to replace part of a line instead of the whole line. xp swaps two letters, intended to be used to fix typos. x deletes the highlighted letter p pastes the previously deleted letter Visual Mode Commands #Visual Mode is entered by typing v. You select a block of text with your cursor.\n\u0026gt; shifts text to the right \u0026lt; shifts text to the left y yanks (copies) the selected text d deletes the selected text ~ switches the case of the selected text (e.g. false becomes FALSE.) u changes the selected text to lowercase U changes the selected text to uppercase Cutting, Copying, and Pasting # yy yanks (copies) a line \u0026lt;number\u0026gt;yy yanks (copies) \u0026lt;number\u0026gt; numbers of lines yw yanks from where the cursor is to the beginning of the next word yiw yanks the word under the cursor y$ yanks from cursor to the end of the line p puts (pastes) the clipboard after the cursor P puts (pastes) the clipboard before the cursor dd deletes (cuts) a line \u0026lt;number\u0026gt;dd deletes (cuts) \u0026lt;number\u0026gt; number of lines dw deletes (cuts) from the cursor to the start of the next word diw deletes (cuts) the word under the cursor d$ or D deletes (cuts) from cursor to the end of the line x deletes (cuts) a character Indenting # \u0026gt;\u0026gt; indents a line one shiftwidth \u0026lt;\u0026lt; de-indents a line one shiftwidth gg=G re indents the entire buffer (Visual Mode) =% re indents the entire block inside a () or {} (Cursor must be on one of the braces) ]p puts (pastes) with adjusted indentation \u0026lt;number\u0026gt;== re indents \u0026lt;number\u0026gt; number of lines Registers # :reg[isters] shows all registers content \u0026quot;xy yanks whatever is selected into register x \u0026quot;xp pastes whatever is in register x where the cursor is \u0026quot;+y yanks whatever is selected into the system clipboard \u0026quot;+p pastes from the system clipboard where the cursor is Special Registers: 0 holds the last yank \u0026quot; is an unnamed register, holds the last delete or yank % holds the current file name # holds an alternate file name + holds the system clipboard / holds the last search pattern : holds the last command run . holds the last inserted text - holds the last small delete (less than a line) = is the expression register This register holds the result of an expression, handy for not having to use :call _ is the black hole register Like /dev/null as a register, anything written to it disappears Can be useful when you want to delete something but not affect any registers Macros # qa records a macro and stores it as macro a q stops recording whatever macro is currently being recorded @a runs macro a @@ runs the last run macro Marks and Positions # :marks shows a list of marks m\u0026lt;letter\u0026gt; sets the current position as mark \u0026lt;letter\u0026gt; `\u0026lt;letter\u0026gt; jumps the cursor to mark \u0026lt;letter\u0026gt; y`\u0026lt;letter\u0026gt; yanks text from the cursor to the position of mark \u0026lt;letter\u0026gt; Special Marks: `0 moves the cursor to the position where Vim was previously exited `\u0026quot; moves the cursor to the position when last editing this file `. moves the cursor to the position of the last change in this file \\ `` moves the cursor to the position before the last jump :ju[mps] lists all the jumps made Ctrl + i moves the cursor to the newer position in jump list Ctrl + o moves the cursor to the older position in jump list :changes lists all the positions where changes have been made g, moves the cursor to the newer position in change list g; moves the cursor to the older position in change list Commands # These are used less like keybinds and more like commands. Hence the name, Commands.\nGlobal commands # :h[elp] \u0026lt;keyword\u0026gt; opens the help for keyword :sav[eas] \u0026lt;filename\u0026gt; will save the file using the filename provided :clo[se] closes the current pane :ter[minal] opens a terminal window K opens the man page for the word under the cursor Exiting # :w saves the current file, but does not exit. :wq or :x or ZZ saves the current file and then quits :q quits out of vim (will not work if there are unsaved changes) :q! or ZQ quits out of vim and throws out unsaved changes (quit without saving) :wqa saves the file and quits on every tab. Search and Replace # /pattern will search for a pattern ?pattern will search backward for a pattern n goes to the next result of the search in same direction N goes to the next result of the in opposite direction \\vpattern is \u0026lsquo;very magic\u0026rsquo; pattern: non-alphanumeric characters are interpreted as special regex symbols (no escaping needed) :%s/old/new/g will replace all old with new throughout file :%s/old/new/gc will replace all old with new throughout file with confirmations :g/{pattern}/d will delete all lines containing pattern :g!/{pattern}/d will delete all lines not containing pattern Searching in Multiple Files # :vim[grep] /pattern/ {\u0026lt;file\u0026gt;} searches for pattern in multiple files :cn[ext] jumps to the next match :cp[revious] jumps to the previous match :cope[n] opens a window containing the list of matches :ccl[ose] closes the window containing the list of matches Tabs # :tabnew or :tabnew \u0026lt;file\u0026gt; opens a file in a new tab Ctrl + wT moves the current split window into its own tab gt or :tabn[ext] moves you to the next tab gT or :tabp[revious] moves you to the previous tab #gt moves you to the # tab :tabm[ove] # moves the current tab to the #th position (indexed from 0) :tabo[nly] closes all tabs except for the current one Working with Multiple Files # :e[dit] \u0026lt;file\u0026gt; opens a file in a new buffer :bn[ext] moves to the next buffer :bp[revious] moves to the previous buffer :bd[elete] deletes a buffer (close a file) :b[uffer]# moves to a buffer by index # :b[uffer] \u0026lt;file\u0026gt; moves to a buffer by file :ls or :buffers lists all open buffers :sp[lit] \u0026lt;file\u0026gt; opens a file in a new buffer and split window :vs[plit] \u0026lt;file\u0026gt; opens a file in a new buffer and vertically split window Ctrl + ws splits window horizontally Ctrl + wv splits window vertically Ctrl + ww switches between windows Ctrl + \u0026lt;movement key\u0026gt; moves the cursor to the window in the direction of the movement key ","date":"February 25, 2025","permalink":"/posts/a-mostly-exhaustive-list-of-keybinds-and-commands-for-vim/","section":"Posts","summary":"","title":"A (Mostly) Exhaustive List of Keybinds and Commands for Vim"},{"content":"I\u0026rsquo;m really digging my Hugo blog since I put it together in This Post, but I wanted to make some tweaks to match some of the appearance in Obsidian, as well as some little tweaks like enabling theme switching.\nRemoving back-ticks from inline code # When inline code got rendered using the congo theme, initially they got rendered with the backticks as part of the inline code. I found that in Hugo, you can add a custom.css under assets/css. And then I also found a site where somebody else running a Hugo blog/site that also uses Congo had some CSS rules that would remove the backticks from inline code. That site is here, and the CSS rules are:\n.prose :where(code):not(:where([class~=\u0026#34;not-prose\u0026#34;] *))::before { content: unset !important; } .prose :where(code):not(:where([class~=\u0026#34;not-prose\u0026#34;] *))::after { content: unset !important; } These remove the wrapper symbols (im guessing?) from before and after anything with the code style associated. I\u0026rsquo;m sad to say that I am not as educated as I should be on CSS, while I can figure out what CSS does, I can\u0026rsquo;t just look at it and understand what a snippet does. That was part of the reason I wanted to try building the blog in the first place. So now inline code has no backticks: Adding a background to inline code # Let\u0026rsquo;s go! A little dopamine hit goes a long way, now I want to make the inline code have a background, like how this codeblock does. Basically, I want the Hugo site to mimic the style that Obsidian uses, while following the color pattern of the Congo theme. This took a little doing, since I didn\u0026rsquo;t understand how tailwind works. Tailwind CSS, for those that don\u0026rsquo;t know, is essentially a set of predefined styles that you can use to define some complex CSS styles. This means that your css files need to be post-processed in order for the tailwind rules to be applied. I had forgotten this, so my first attempt was to simply copy the .chroma rule into the code rule in my custom CSS from the Congo main.css:\ncode { word-wrap: break-word; /* All browsers since IE 5.5+ */ @apply break-words; @apply rounded-md bg-neutral-50 py-3 text-neutral-700 dark:bg-neutral-700 dark:text-neutral-200; } This probably would have worked, if the custom css was pre processed. But it\u0026rsquo;s not, and I didn\u0026rsquo;t realize this for half a day. Just clicking rocks together the whole time. This probably would have been so much faster to implement if I had a clue what I was doing. Anyways, I did have a good thought: tailwind css is just css. So, ask chatgpt to rewrite the tailwind rule I wrote, and\u0026hellip;\n.prose :where(code):not(:where([class~=\u0026#34;not-prose\u0026#34;], [class~=\u0026#34;not-prose\u0026#34;] *)) { background-color: #f0f0f0 !important; /* Force light mode */ word-wrap: break-word; overflow-wrap: break-word; border-radius: 0.200rem; padding-inline: 0.25rem; } .dark .prose :where(code):not(:where([class~=\u0026#34;not-prose\u0026#34;], [class~=\u0026#34;not-prose\u0026#34;] *)) { background-color: #404040 !important; /* Force dark mode */ } I did take some stuff out, so that it\u0026rsquo;s just the rules you need to get the background. If you are implementing this for yourself, you might want to tweak the background colors for the respective appearance modes. This is what I think works for me. And now\u0026hellip; Looking good!\nAdding Appearance Toggle # We\u0026rsquo;ve reached the portion of the post where i\u0026rsquo;m just tackling small stuff. I ended up putting an appearance toggle in the footer, and the menu.\n# params.toml [footer] # showCopyright = true showThemeAttribution = true showAppearanceSwitcher = true showScrollToTop = true # menus.en.toml [[main]] identifier = \u0026#34;appearance\u0026#34; weight = 95 [main.params] action = \u0026#34;appearance\u0026#34; After adding the toggles, the toggles worked locally but not after being pushed to github pages. An issue on the Congo github page pointed me in the right direction, my cloudflare had Rocket Loader setup. This was messing with the appearance loader in some way, the guy that solved the issue said it had something to do with how the content was being loaded. TBH, I think i\u0026rsquo;ve had Rocket Loader cause problems in the past before, I don\u0026rsquo;t remember why I enabled it. Anyways, that got turned off and the appearance switcher works just fine now.\nThat\u0026rsquo;s about it. See ya.\n","date":"February 23, 2025","permalink":"/posts/blog-tweaks-pedantic-perils/","section":"Posts","summary":"","title":"Blog Tweaks: Pedantic Perils"},{"content":"","date":null,"permalink":"/tags/hugo/","section":"Tags","summary":"","title":"Hugo"},{"content":"","date":null,"permalink":"/tags/obsidian/","section":"Tags","summary":"","title":"Obsidian"},{"content":"Now that I have a blog, I wanted to document how to do this because it\u0026rsquo;s a niche-r hobby. I had, not a difficult time, but a time getting this working properly, and finding out how to setup playlists. All told though, it\u0026rsquo;s fun to get setup.\nWhat is trunking? # In a nutshell, Trunking is when multiple users need to share a pool of radio frequencies. There is a control channel that manages which frequencies are in use and who are using them, and who is requesting to use a channel. Talkgroups are roles within the system assigned to users, and allow for group based permissions. When a user initiates a transmission, the control channel will tell the user what channel it can use. When a transmission is made on that channel, all the members of the same talkgroup will receive the transmission. Are you getting it now?\nSDR Trunk is specifically made to work with the following trunking (and some non trunking) protocols:\nAM - AM demodulator APCO-25 Phase 1 (C4FM/Simulcast) - P25 message decoder and automatic trunked channel following. APCO-25 Phase 2 - Phase 1 control channels with automatic Phase 2 trunked channel following. DCS - Digital Coded Squelch (DCS) decoder for NBFM channels Fleetsync II - FM demodulator and decoder for ANI, Acknowledge, Status, Paging and GPS bursts FM/NBFM - narrow-band FM demodulator with squelch control. LJ1200 - FM demodulator and decoder for LoJack data bursts on 173.075 MHz in US. LTR-Net - FM demodulator and LTR-Net trunked radio signaling decoder LTR-Standard - FM demodulator and Logic Trunked Radio (LTR) trunked radio signaling decoder MDC-1200 - FM demodulator and decoder for MDC-1200 ANI bursts. MPT-1327 - FM demodulator and MPT-1327 trunked radio signaling decoder and automatic trunked channel following. Passport - FM demodulator and Passport trunked radio signaling decoder. Tait 1200 - FM demodulator and decoder for Tait CCDI protocol GPS location bursts. Getting RTL-SDR drivers installed # This is gonna be platform specific, but we need drivers to use RTL-SDR devices. Please follow the official quick start guide @ airspy.com and make sure your dongle is plugged in before continuing (how will we know the dongle works if it\u0026rsquo;s not plugged in?)\nOn most linux systems, just install the rtl-sdr package for your system and you\u0026rsquo;re rolling. Run rtl_test to see if your device is detected. If not, a common reason that it isn\u0026rsquo;t getting picked up is because it is stuck in dvb-t mode. You can fix this by blacklisting the dvb-t module from being loaded, like so:\n$ cd /etc/modprobe.d $ sudo nano dvb_blacklist.conf [in the config file, add this line] blacklist dvb_usb_rtl28xxu On windows systems, it\u0026rsquo;s a little more involved. Download the SDR# package, run install-rtlsdr.bat, then run the zadig.exe it downloaded. Go to the options tab, and select \u0026ldquo;List all devices\u0026rdquo;. Sometimes you need to uncheck \u0026ldquo;Ignore hubs or composite patterns\u0026rdquo;. Then, select \u0026ldquo;Bulk-In, Interface (Interface 0)\u0026rdquo;, make sure the driver box says \u0026ldquo;WinUSB \u0026hellip;\u0026rdquo;, then click Replace Driver.\nMac seems like you don\u0026rsquo;t need to do anything? weird. But I don\u0026rsquo;t care. Moving on!\nInstall \u0026amp; Setup SDR Trunk # Pretty easy, download from the Releases Page or install through your package manager (I used the AUR). Once done, you should see an interface like this: You will likely get prompted to perform CPU calibrations if it\u0026rsquo;s the first time running the program, go ahead and accept. Let it do it\u0026rsquo;s thing. While that\u0026rsquo;s going, we can actually do one more thing. We need to install the JMBE library, responsible for audio decoding. Click the \u0026ldquo;Create Library\u0026rdquo; button, and install the jar file. You should see something like this in the settings menu once it\u0026rsquo;s setup properly: By now, the JMBE library and the CPU calibration should both be done. The blue, red, orange thing is called a \u0026ldquo;waterfall\u0026rdquo;. Basically a spectrum analyzer, and it\u0026rsquo;s purpose is to show signals and their strength in the range of frequencies being viewed. If it is killing your resource usage, you can disable it by right clicking on it and disabling it.\nBuilding our Playlist # Alright, here\u0026rsquo;s the true hard part of getting SDR Trunk working. SDR Trunk uses a playlist to manage all the information needed for listening to trunked systems. This includes:\nChannels (Frequencies, Protocols, Names, etc.) Aliases (Talkgroups, Aliases, \u0026amp; identifiers) If you bare bones it, it\u0026rsquo;s not hard, but you will be missing some useful data like correct talkgroups and aliases and stuff. I Highly encourage you to pay for a Radio Reference, just one time. They\u0026rsquo;re not expensive, and it\u0026rsquo;s worth the time you can save. Because\u0026hellip; You can import all the data for your area straight from Radio Reference if you have a subscription! Just make an account, buy a subscription, and then import a system. If you really want to make the most out of your subscription, Backup your playlists of imported data before your subscription runs out. Then in the future, just update any relevant data when a channel quits working.\nI will not go over how to build a playlist manually, if you want to do that (masochist) go read the SDRTrunk Wiki and figure it out yourself.\nTuning into a site # So easy it doesn\u0026rsquo;t really deserve a section.\nGo to the playlist editor select your playlist go to the channels section Find the site you want to listen to click on it, then press the play button You can see in my playlist that I picked the \u0026ldquo;Jefferson County Simulcast\u0026rdquo; site, and the big play button. You should have success! If you see a \u0026ldquo;CONTROL\u0026rdquo; channel, you\u0026rsquo;ve tuned into the trunked system correctly. If aliases are set up properly, those will show up in the Alias column. Any sub channels that are pink and say \u0026ldquo;ENCRYPTED\u0026rdquo; can\u0026rsquo;t be played, but any blue channels that say \u0026ldquo;CALL\u0026rdquo; can. SDRTrunk can play 2 calls at the same time, one on the left audio channel and another on the right audio channel. It can get chaotic, and I haven\u0026rsquo;t learned how to enforce a single call to play at a time. You can setup recording each snippet that comes in for any given alias, just go to the alias and set it to record audio. Whenever a call occurs with the alias being part of that call, the audio segment will get saved to disk.\nThat\u0026rsquo;s about all I know, SDRTrunk is a neat program to run every once in a while. I\u0026rsquo;ll put a link to my playlist here once I get it uploaded in the blog repo, in case anybody in \u0026lsquo;Bama wants to give this a try. Other states, you\u0026rsquo;re on your own 😉\nSpeaking of blog, This post is the first post to contain a gif! Which I thought was previously not going to work, but I forgot I already implemented that when I wrote my import script. ","date":"February 20, 2025","permalink":"/posts/listening-to-the-police-scanner-with-sdr-trunk/","section":"Posts","summary":"","title":"Listening to the Police Scanner with SDR Trunk"},{"content":"","date":null,"permalink":"/tags/rtl-sdr/","section":"Tags","summary":"","title":"RTL-SDR"},{"content":"Introduction # Recently, I had a really tough bug that was following me around on any linux distro I tried. System would work fine for a while, then freeze out of nowhere. I had a school project (that I massively procrastinated on) due, so I switched to windows just to get it done. Then I came back to it, realized what was causing the crashes (some issue introduced in mesa driver 24.3.0) and downgraded to an older version. It\u0026rsquo;s been a week with no crashes! Anyway, while I was troubleshooting I griped about it to some friends and I ran my mouth so much someone said I should start a blog. Not a bad idea, and it\u0026rsquo;d help me procrastinate studying for my midterm. I use Obsidian to take notes. Any kind of notes: Lecture Notes, Recipes, Shopping lists, you name it. If it is text based, I use Obsidian. Why not make obsidian files be the blog?\nI watched NetworkChuck\u0026rsquo;s Video to get started, but I knew that it would get a little different for me. For one, i\u0026rsquo;d like to host the static site on github pages. I\u0026rsquo;ve already got a domain registered that points to the github pages, and I had a pretty shitty svelte site running on it that I used to learn how to use svelte. If you\u0026rsquo;re reading this, then that means I moved the svelte project out of this repo into another repo, and am running this blog on bigdale123.github.io. I\u0026rsquo;m sure when github eventually removes the free github pages for users, i\u0026rsquo;ll scramble to get it hosted on my proxmox cluster. But for now, i\u0026rsquo;ll host somewhere that won\u0026rsquo;t be affected by a brown out.\nThe plan # Shrimple.\nFigure out how to get hugo to build static files from obsidian Fix any kind of missing content errors (like missing photos and stuff) Figure out how I want to \u0026ldquo;workflow\u0026rdquo; the building process, if necessary. Basically, decide if I want to automate any of this process Push to github and see if the static site works (Optional and If supported) Style the blog site Hugo site has themes (Optional and If supported) Maybe hugo can do categorical blog posts? Haven\u0026rsquo;t done any research before attempting, hence optional Step 1: Learning how to use Hugo # I\u0026rsquo;m planning on using Congo for my Hugo theme. Looks nice, can support search, tags, archives, etc. Setup has been a little difficult, because I got confused on which config directory to use. Once I figured that out, I could finally see my changes. Behold, the first thing I have seen other than a blank page! We love a good RoboCop quote. If only I could figure out how to get my damn Obsidian files to show up. (Some time later) Yeah, I forgot. Whoops. New problem to tackle, the way Obsidian handles photos in text (following the form of ![[some_image.png]]) is not the same as the way that Hugo handles images (following the form of ![Example Image](/path/to/some_image.png)). Not a problem with Hugo, but we will need to follow the same route NetworkChuck used by writing a script to port over images and replace any image paths. Also not a huge deal, since the way I want to have hugo build the site will require copying the markdown files from my Obsidian vault to Hugo. This way I can keep my blog posts in my vault, and the script should just copy them over.\nStep 2: Fixing missing content # So, now for the real work. I need to write a script that will do the following (in order, ideally):\nCopy the entire \u0026ldquo;Blog Content\u0026rdquo; folder from Obsidian to the \u0026ldquo;content\u0026rdquo; folder in the site repository. For each markdown file, replace all instances of ![[some_image.png]] with ![](/attachments/some_image.png) There will be more steps in the script, but for now this is all we need. I\u0026rsquo;m going to borrow from NetworkChuck\u0026rsquo;s script heavily, since he has basically the same use case that I do (Source Code: https://blog.networkchuck.com/posts/my-insane-blog-pipeline/). The only thing i\u0026rsquo;ll really change is probably the OS dependent versions, the OS library should include methods that will handle paths in a way that the same code can be cross platform. Here\u0026rsquo;s what i\u0026rsquo;m going with, if you happen to find this (hello, you industrious little fellow) you might have to change how the attachments folder is found based on how your obsidian vault handles attachments. Mine uses an attachments subfolder in the parent directory of the markdown file. import os import re import shutil import sys def copy_vault_files(path_to_vault_folder): # Check that folder contains posts folder (validity check) if not os.path.isdir(path_to_vault_folder): raise IOError(\u0026#34;Given path does not exist.\u0026#34;) if not os.path.isdir(os.path.join(path_to_vault_folder, \u0026#39;posts\u0026#39;)): raise IOError(\u0026#34;Given path does not contain a \u0026#39;posts\u0026#39; folder.\u0026#34;) # Recursively copy files over, maintaining the structure, including attachments shutil.copytree(path_to_vault_folder, os.path.join(os.getcwd(), \u0026#34;content\u0026#34;), dirs_exist_ok=True) # For every file that was copied over, replace obsidian formatted images with appropriate hugo image format for dirpath, _, filenames in os.walk(\u0026#34;content\u0026#34;): for filename in filenames: if filename.endswith(\u0026#39;.md\u0026#39;): file_path = os.path.join(dirpath, filename) # print(f\u0026#34;Markdown File: {file_path}\u0026#34;) attachments_directory = os.path.join(dirpath, \u0026#39;attachments\u0026#39;) # Load file content and find all images matching format ![[]] with open(file_path, \u0026#34;r\u0026#34;, encoding=\u0026#34;utf-8\u0026#34;) as file: content = file.read() images = re.findall(r\u0026#39;\\[\\[([^]]+\\.(?:png|jpg|jpeg|gif|bmp|svg|webp))\\]\\]\u0026#39;, content) for image in images: # Edge case: check that the image actually exists before replacing the markdown # print(f\u0026#34;Found Image: {image}\u0026#34;) # check that attachments directory exists, only if file contains images if not os.path.isdir(attachments_directory): raise IOError(f\u0026#34;Attachments directory for file {file_path} does not exist\u0026#34;) image_path = os.path.join(attachments_directory, image) if os.path.exists(image_path) and os.path.isfile(image_path): # image exists, replace markdown and copy file to static/attachments # copy file to static/attachments new_image = os.path.join(\u0026#34;static\u0026#34;, \u0026#34;attachments\u0026#34;, image) os.makedirs(os.path.join(\u0026#34;static\u0026#34;, \u0026#34;attachments\u0026#34;), exist_ok=True) shutil.copy2(image_path, new_image) # replace markdown new_markdown = f\u0026#34;![{image}](/attachments/{image.replace(\u0026#39; \u0026#39;, \u0026#39;%20\u0026#39;)})\u0026#34; # print(new_markdown) content = content.replace(f\u0026#34;![[{image}]]\u0026#34;, new_markdown) print(f\u0026#34;Image Found in {file_path}:\\n Replacing ![[{image}]] with {new_markdown}\u0026#34;) with open(file_path, \u0026#34;w\u0026#34;, encoding=\u0026#34;utf-8\u0026#34;) as file: file.write(content) A tad ugly, but it gets the job done. And now we have images showing up in Hugo! Step 3: Workflowing the pipeline # A\u0026rsquo;ight, that\u0026rsquo;s the real heavy work the python script should do. Now I need to write some other stuff that will build the static site and push it upto the github repo.\nActually, I think i\u0026rsquo;ll keep this script separate from the whole publishing part. That way I can port over the obsidian files, test the server first to make sure everything renders OK, then do the publishing. Or at least a separate function, that way I can ask if somebody wants to build and push.\nJust to make it easier on myself, I have set the publish dir in my config.toml to docs, since Github Pages natively supports using this directory as the build directory. Honestly, it\u0026rsquo;s kinda dissapointing that GitHub won\u0026rsquo;t let you pick any folder in your branch, you\u0026rsquo;re stuck between /docs or /. Here\u0026rsquo;s the config.toml section: EDIT: I ended up undoing this for a custom github action, see next step.\n# -- Site Configuration -- # Refer to the theme docs for more details about each of these parameters. # https://jpanther.github.io/congo/docs/getting-started/ baseURL = \u0026#34;/\u0026#34; defaultContentLanguage = \u0026#34;en\u0026#34; publishDir = \u0026#34;docs\u0026#34; ... And here\u0026rsquo;s what I wrote for the publishing function, honestly I probably won\u0026rsquo;t use it since it\u0026rsquo;s just hugo then a push to the repo.\ndef publish(): os.system(\u0026#34;hugo\u0026#34;) commit_message = f\u0026#34;Automated Publish on {datetime.now().strftime(\u0026#34;%Y-%m-%d %H:%M:%S\u0026#34;)}\u0026#34; os.system(\u0026#34;git add *\u0026#34;) os.system(f\u0026#39;git commit -am \u0026#34;{commit_message}\u0026#34;\u0026#39;) os.system(\u0026#34;git push\u0026#34;) Step 4: See if the static site works # Well, if you\u0026rsquo;re reading this you know it works. I had some trouble getting github pages to work with it. I got an error the first time I tried to have the pages action build the site, Liquid Exception: Invalid Date: '\u0026quot;{{ .Date }}\u0026quot;' is not a valid datetime. in /_layouts/default.html. To fix this, i added a .nojekyll file inside the docs directory, which should make pages serve the site as is. And\u0026hellip; It didn\u0026rsquo;t work. I guess that just don\u0026rsquo;t work no more 😮‍💨. I looked up what to do on the hugo docs, and they recommend a custom github action that will build the hugo site up on github. Turns out I forgot to set them = \u0026quot;congo\u0026quot; in config.toml, but once I did that\u0026hellip; WOOP! Github Pages built and deployed the site using the action that I definitely did not copy word for word from the Hugo site 🙂. The important thing is, the site is up. We can polish all the other stuff later.\nConclusion 🎉 # Steps 5 and 6 are already done, since I picked my theme at the outset and that theme ended up already implementing categories. Call me lucky. This might not have been harder than I thought it would be, but it definitely took me longer than I though it would. Maybe i\u0026rsquo;m getting slower? Whatever, the site is done. It\u0026rsquo;s up. I can move on to the next thing. Maybe I should brush up on Github Actions?\n","date":"February 19, 2025","permalink":"/posts/first-post-learning-how-to-use-hugo-to-host-obsidian-files/","section":"Posts","summary":"","title":"First Post! Learning how to use Hugo to host Obsidian files"},{"content":"","date":null,"permalink":"/tags/homelab/","section":"Tags","summary":"","title":"Homelab"},{"content":"","date":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories"}]